import aiogram
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import asyncio
from TOKEN_API import BOT_TOKEN_TG
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

TOKEN = BOT_TOKEN_TG
bot = aiogram.Bot(token=TOKEN)
dp = aiogram.Dispatcher(bot, storage=MemoryStorage())
kb= InlineKeyboardMarkup()
button_1 = InlineKeyboardButton(text='Рассчитать норму калорий', callback_data='calories')
button_2 = InlineKeyboardButton(text='Формулы расчёта', callback_data='formulas')
kb.add(button_1, button_2)


class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.callback_query_handler(text='calories')
async def set_age(call):
    await call.message.answer('Введите свой возраст: ')
    await call.answer()
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('Введите свой рост: ')
    await UserState.growth.set()


@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('Введите свой вес: ')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def send_calories(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    BOO = 10
    result_data = (BOO * float(data['weight'])) + (6.25 * float(data["growth"])) - (
            4.92 * float(data["age"])) - 161
    await message.answer(f'ваша норма колорий: {result_data}')
    await state.finish()


@dp.message_handler(commands='start')
async def start(message):
    await message.answer('Привет! Я бот помогающий твоему здоровью\nдля дальнейшей работы с ботом вам необходимо отправить текст - ''рассчитать''')


@dp.message_handler(text='рассчитать')
async def main_menu(message):
    await message.answer('Выберите опцию: ', reply_markup=kb)


@dp.callback_query_handler(text='formulas')
async def get_formulas(call):
    await call.message.answer('Вот ваши формулы для подсчета калорий: ')
    await call.message.answer('для мужчин: 10 х вес (кг) + 6,25 x рост (см) – 5 х возраст (г) + 5'
                              '\nдля женщин: 10 x вес (кг) + 6,25 x рост (см) – 5 x возраст (г) – 161')
    await call.answer()


if __name__ == '__main__':
    aiogram.executor.start_polling(dp, skip_updates=True)
